// This script checks dependency inspection result generated by `deno info --json <entrypoint>`
// and fails if it includes external dependency.
import { readAll } from "https://deno.land/std@0.130.0/streams/mod.ts";
import {
  blue,
  bold,
  gray,
  red,
  white,
} from "https://deno.land/std@0.130.0/fmt/colors.ts";

interface InspectionResult {
  modules: readonly ModuleInfo[];
}

interface ModuleInfo {
  specifier: string;
}

function isInspectionResult(something: unknown): something is InspectionResult {
  // outer shape check
  if (!something || typeof something !== "object") {
    return false;
  }

  // field check
  if (
    !("modules" in something) ||
    !Array.isArray((something as { modules: unknown }).modules)
  ) {
    return false;
  }

  // children check
  return (something as { modules: unknown[] }).modules.every((child) => {
    return (
      typeof child === "object" &&
      child &&
      "specifier" in child &&
      typeof (child as { specifier: unknown }).specifier === "string"
    );
  });
}

export async function check(): Promise<never> {
  // Get value from stdin
  const stdin = new TextDecoder().decode(await readAll(Deno.stdin));

  // Parse input string as JSON
  const result: unknown = JSON.parse(stdin);

  if (!isInspectionResult(result)) {
    throw new Error(
      "Cannot process the JSON: shape must be equal to or superset of { modules: Array<{ specifier: [] }> }"
    );
  }

  // Find external modules
  const externalModules = result.modules.filter((mod) => {
    const url = new URL(mod.specifier);

    return url.protocol !== "file:";
  });

  // Show an error if there is
  if (externalModules.length > 0) {
    console.error(
      red(bold(`Found ${externalModules.length} external dependencies:`))
    );
    externalModules.forEach((mod) => {
      console.error(gray(` * ${white(mod.specifier)}`));
    });
    Deno.exit(1);
  }

  console.error(blue("No external dependencies found."));
  Deno.exit(0);
}

if (import.meta.main) {
  await check();
}
